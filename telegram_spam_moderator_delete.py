# telegram_spam_moderator_delete.py
import time
import threading
from collections import defaultdict, deque
import re
import telebot
from telebot import types

import os
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

MAX_MSG = 10            # –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ > MAX_MSG -> –º—É—Ç)
WINDOW_SECONDS = 10     # –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MUTE_SECONDS = 12 * 3600  # 12 —á–∞—Å–æ–≤
CLEAN_SLEEP = 10        # –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
DELETE_LAST = 25        # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª—è—Ç—å
# -------------------------

# key: "chat_id:user_id" -> deque([timestamps...])
user_messages = defaultdict(lambda: deque())
# key: "chat_id:user_id" -> deque([message_ids...])
user_msg_ids = defaultdict(lambda: deque())
# muted users: key -> until_timestamp
muted_users = {}
lock = threading.Lock()

def key(chat_id: int, user_id: int) -> str:
    return f"{chat_id}:{user_id}"

def clean_old_timestamps(dq: deque, now: int):
    while dq and (now - dq[0][0]) > WINDOW_SECONDS:
        dq.popleft()

def bot_has_restrict_rights(chat_id: int) -> bool:
    try:
        me = bot.get_me()
        bot_member = bot.get_chat_member(chat_id, me.id)
        return bot_member.status in ('administrator', 'creator')
    except Exception:
        return False

def schedule_unmute_worker():
    def worker():
        while True:
            now = int(time.time())
            with lock:
                to_unmute = [k for k, until in muted_users.items() if now >= until]
                for k in to_unmute:
                    try:
                        chat_s, user_s = k.split(":")
                        chat_id = int(chat_s); user_id = int(user_s)
                        perms = types.ChatPermissions(
                            can_send_messages=True,
                            can_send_media_messages=True,
                            can_send_other_messages=True,
                            can_add_web_page_previews=True
                        )
                        bot.restrict_chat_member(chat_id, user_id, permissions=perms)
                    except Exception as e:
                        print("unmute error for", k, e)
                    finally:
                        if k in muted_users:
                            del muted_users[k]
            time.sleep(CLEAN_SLEEP)
    t = threading.Thread(target=worker, daemon=True)
    t.start()

def schedule_delete_worker():
    def worker():
        while True:
            with lock:
                for k in list(muted_users.keys()):
                    chat_id, user_id = map(int, k.split(":"))
                    dq_ids = user_msg_ids.get(k, deque())
                    while dq_ids:
                        msg_id = dq_ids.popleft()
                        try:
                            bot.delete_message(chat_id, msg_id)
                        except Exception:
                            pass
            time.sleep(1)
    t = threading.Thread(target=worker, daemon=True)
    t.start()

def parse_time_string(s: str) -> int:
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –§–æ—Ä–º–∞—Ç: 10s, 5m, 2h, 1d"""
    pattern = r"(\d+)([smHd])"
    m = re.match(pattern, s)
    if not m:
        return None
    val, unit = m.groups()
    val = int(val)
    unit = unit.lower()
    if unit == 's':
        return val
    elif unit == 'm':
        return val * 60
    elif unit == 'h':
        return val * 3600
    elif unit == 'd':
        return val * 86400
    return None

# -------------------- –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ --------------------
@bot.message_handler(commands=['mute', 'ban'])
def on_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ /mute 2d –æ—Ç–≤–µ—Ç_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    if message.chat.type != 'supergroup':
        return
    if not bot_has_restrict_rights(message.chat.id):
        bot.reply_to(message, "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–∞–º–∏.")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: /mute 2d –ø—Ä–∏—á–∏–Ω–∞")
        return

    time_str = parts[1]
    duration = parse_time_string(time_str)
    if duration is None:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 10s, 5m, 2h, 1d")
        return

    comment = " ".join(parts[2:]) if len(parts) > 2 else ""

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id
    k = key(chat_id, user_id)

    try:
        if message.text.startswith("/mute"):
            perms = types.ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False
            )
            until = int(time.time()) + duration
            bot.restrict_chat_member(chat_id, user_id, permissions=perms, until_date=until)
            with lock:
                muted_users[k] = until
            bot.send_message(chat_id,
                             f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>"
                             f"{message.reply_to_message.from_user.full_name}</a> –∑–∞–º—É—á–µ–Ω –Ω–∞ {time_str}. {comment}",
                             parse_mode="HTML")
        elif message.text.startswith("/ban"):
            bot.kick_chat_member(chat_id, user_id)
            with lock:
                if k in muted_users: del muted_users[k]
                if k in user_messages: del user_messages[k]
                if k in user_msg_ids: del user_msg_ids[k]
            bot.send_message(chat_id,
                             f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>"
                             f"{message.reply_to_message.from_user.full_name}</a> –∑–∞–±–∞–Ω–µ–Ω. {comment}",
                             parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['unmute', 'unban'])
def on_unmute_unban_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥—ã /unmute –∏ /unban —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.chat.type != 'supergroup':
        return
    if not bot_has_restrict_rights(message.chat.id):
        bot.reply_to(message, "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–∞–º–∏.")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id
    k = key(chat_id, user_id)
    comment = " ".join(message.text.split()[1:]) if len(message.text.split()) > 1 else ""

    try:
        if message.text.startswith("/unmute"):
            with lock:
                if k not in muted_users:
                    bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ.")
                    return
                perms = types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
                bot.restrict_chat_member(chat_id, user_id, permissions=perms)
                del muted_users[k]
            bot.send_message(chat_id,
                             f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>"
                             f"{message.reply_to_message.from_user.full_name}</a> –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω. {comment}",
                             parse_mode="HTML")
        elif message.text.startswith("/unban"):
            try:
                bot.unban_chat_member(chat_id, user_id)
            except Exception as e:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")
                return
            with lock:
                if k in muted_users: del muted_users[k]
                if k in user_messages: del user_messages[k]
                if k in user_msg_ids: del user_msg_ids[k]
            bot.send_message(chat_id,
                             f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>"
                             f"{message.reply_to_message.from_user.full_name}</a> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω. {comment}",
                             parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
@bot.message_handler(func=lambda m: True,
                     content_types=['text', 'sticker', 'photo', 'video', 'voice', 'animation', 'document'])
def on_message(message: types.Message):
    if message.chat.type != 'supergroup':
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    now = int(time.time())
    k = key(chat_id, user_id)

    if not bot_has_restrict_rights(chat_id):
        return

    with lock:
        dq_ids = user_msg_ids[k]
        dq_ids.append(message.message_id)
        while len(dq_ids) > DELETE_LAST:
            dq_ids.popleft()

        if k in muted_users:
            return

        dq_times = user_messages[k]
        dq_times.append((now, message.message_id))
        clean_old_timestamps(dq_times, now)

        if len(dq_times) > MAX_MSG:
            until = now + MUTE_SECONDS
            try:
                perms = types.ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False
                )
                bot.restrict_chat_member(chat_id, user_id, permissions=perms, until_date=until)
            except telebot.apihelper.ApiException as e:
                bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                return

            muted_users[k] = until
            user_messages[k].clear()

            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–†–∞–∑–º—É—Ç–∏—Ç—å", callback_data=f"unmute:{chat_id}:{user_id}"))
            kb.add(types.InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban:{chat_id}:{user_id}"))

            name = message.from_user.full_name or message.from_user.username or str(user_id)
            text = (f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{name}</a> "
                    f"–∑–∞–º—É—á–µ–Ω –Ω–∞ 12 —á–∞—Å–æ–≤ –∑–∞ —Å–ø–∞–º: {MAX_MSG + 1}+ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {WINDOW_SECONDS} —Å–µ–∫. "
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {DELETE_LAST} —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
            bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")

# -------------------- Inline –∫–Ω–æ–ø–∫–∏ --------------------
@bot.callback_query_handler(func=lambda cq: True)
def on_callback(cq: types.CallbackQuery):
    data = cq.data or ""
    parts = data.split(":")
    if len(parts) != 3:
        bot.answer_callback_query(cq.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    action, chat_s, user_s = parts
    try:
        chat_id = int(chat_s)
        target_user_id = int(user_s)
    except ValueError:
        bot.answer_callback_query(cq.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç –∞–¥–º–∏–Ω
    try:
        invoker_id = cq.from_user.id
        inv_member = bot.get_chat_member(chat_id, invoker_id)
        if inv_member.status not in ('administrator', 'creator'):
            bot.answer_callback_query(cq.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
            return
    except Exception:
        bot.answer_callback_query(cq.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ.")
        return

    k = key(chat_id, target_user_id)
    try:
        target_name = bot.get_chat_member(chat_id, target_user_id).user.full_name
    except Exception:
        target_name = str(target_user_id)

    with lock:
        if action == "unmute":
            if k not in muted_users:
                bot.answer_callback_query(cq.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –º—É—Ç–µ.")
                return
            try:
                perms = types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
                bot.restrict_chat_member(chat_id, target_user_id, permissions=perms)
                del muted_users[k]
            except Exception as e:
                bot.answer_callback_query(cq.id, f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º—É—Ç—ã: {e}")
                return
            bot.answer_callback_query(cq.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")
            bot.send_message(chat_id, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={target_user_id}'>{target_name}</a> –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.", parse_mode="HTML")

        elif action == "ban":
            try:
                bot.kick_chat_member(chat_id, target_user_id)
            except Exception as e:
                bot.answer_callback_query(cq.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
                return
            if k in muted_users: del muted_users[k]
            if k in user_messages: del user_messages[k]
            if k in user_msg_ids: del user_msg_ids[k]
            bot.answer_callback_query(cq.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
            bot.send_message(chat_id, f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={target_user_id}'>{target_name}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º.", parse_mode="HTML")
        else:
            bot.answer_callback_query(cq.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

if __name__ == "__main__":
    schedule_unmute_worker()
    schedule_delete_worker()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)
